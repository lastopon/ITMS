# Generated by Django 4.2.7 on 2025-08-27 16:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('itms_app', '0002_reservation_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComplianceFramework',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., ISO 27001, GDPR, SOX', max_length=100)),
                ('description', models.TextField()),
                ('version', models.CharField(blank=True, max_length=20)),
                ('effective_date', models.DateField()),
                ('review_frequency_months', models.IntegerField(default=12)),
                ('next_review_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('responsible_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DisasterRecoveryPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('plan_type', models.CharField(choices=[('hot_site', 'Hot Site'), ('warm_site', 'Warm Site'), ('cold_site', 'Cold Site'), ('cloud_based', 'Cloud-based'), ('mobile_site', 'Mobile Site')], max_length=20)),
                ('priority', models.CharField(choices=[('critical', 'Critical'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], max_length=20)),
                ('rpo_hours', models.FloatField(help_text='Recovery Point Objective in hours')),
                ('rto_hours', models.FloatField(help_text='Recovery Time Objective in hours')),
                ('recovery_steps', models.TextField(help_text='Detailed recovery procedures')),
                ('contact_list', models.TextField(help_text='Emergency contact information')),
                ('testing_frequency', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('semi_annually', 'Semi-annually'), ('annually', 'Annually')], max_length=20)),
                ('last_tested', models.DateTimeField(blank=True, null=True)),
                ('next_test_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assets', models.ManyToManyField(blank=True, to='itms_app.asset')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_code', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('item_type', models.CharField(choices=[('component', 'Component'), ('consumable', 'Consumable'), ('spare_part', 'Spare Part'), ('tool', 'Tool'), ('cable', 'Cable'), ('accessory', 'Accessory')], max_length=20)),
                ('manufacturer', models.CharField(blank=True, max_length=100)),
                ('part_number', models.CharField(blank=True, max_length=100)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('quantity_on_hand', models.IntegerField(default=0)),
                ('minimum_stock_level', models.IntegerField(default=0)),
                ('maximum_stock_level', models.IntegerField(blank=True, null=True)),
                ('reorder_point', models.IntegerField(blank=True, null=True)),
                ('storage_location', models.CharField(blank=True, help_text='Specific storage location within the location', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='itms_app.location')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='itms_app.vendor')),
            ],
            options={
                'ordering': ['item_code'],
            },
        ),
        migrations.CreateModel(
            name='MobileDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=100, unique=True)),
                ('device_name', models.CharField(max_length=200)),
                ('device_type', models.CharField(choices=[('smartphone', 'Smartphone'), ('tablet', 'Tablet'), ('laptop', 'Laptop'), ('wearable', 'Wearable Device')], max_length=20)),
                ('platform', models.CharField(choices=[('ios', 'iOS'), ('android', 'Android'), ('windows', 'Windows'), ('macos', 'macOS')], max_length=20)),
                ('os_version', models.CharField(blank=True, max_length=50)),
                ('serial_number', models.CharField(blank=True, max_length=100)),
                ('imei', models.CharField(blank=True, help_text='International Mobile Equipment Identity', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('status', models.CharField(choices=[('enrolled', 'Enrolled'), ('active', 'Active'), ('inactive', 'Inactive'), ('lost', 'Lost'), ('stolen', 'Stolen'), ('retired', 'Retired'), ('wiped', 'Wiped')], default='enrolled', max_length=20)),
                ('is_supervised', models.BooleanField(default=False)),
                ('is_encrypted', models.BooleanField(default=False)),
                ('passcode_enabled', models.BooleanField(default=False)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('location_latitude', models.FloatField(blank=True, null=True)),
                ('location_longitude', models.FloatField(blank=True, null=True)),
                ('location_accuracy', models.FloatField(blank=True, null=True)),
                ('battery_level', models.IntegerField(blank=True, null=True)),
                ('storage_total_gb', models.FloatField(blank=True, null=True)),
                ('storage_used_gb', models.FloatField(blank=True, null=True)),
                ('enrollment_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mobile_devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['device_name'],
            },
        ),
        migrations.CreateModel(
            name='NetworkDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_name', models.CharField(max_length=100)),
                ('device_type', models.CharField(choices=[('router', 'Router'), ('switch', 'Switch'), ('firewall', 'Firewall'), ('access_point', 'Access Point'), ('load_balancer', 'Load Balancer'), ('proxy', 'Proxy Server'), ('vpn_gateway', 'VPN Gateway'), ('modem', 'Modem'), ('bridge', 'Bridge'), ('hub', 'Hub')], max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('mac_address', models.CharField(blank=True, max_length=17)),
                ('subnet_mask', models.GenericIPAddressField(blank=True, null=True)),
                ('default_gateway', models.GenericIPAddressField(blank=True, null=True)),
                ('dns_servers', models.TextField(blank=True, help_text='Comma-separated DNS servers')),
                ('vlan_id', models.IntegerField(blank=True, null=True)),
                ('port_count', models.IntegerField(blank=True, null=True)),
                ('firmware_version', models.CharField(blank=True, max_length=50)),
                ('management_url', models.URLField(blank=True)),
                ('snmp_community', models.CharField(blank=True, max_length=50)),
                ('status', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('maintenance', 'Under Maintenance'), ('warning', 'Warning'), ('critical', 'Critical')], default='offline', max_length=20)),
                ('last_ping', models.DateTimeField(blank=True, null=True)),
                ('uptime_hours', models.FloatField(blank=True, null=True)),
                ('configuration_backup', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='network_device', to='itms_app.asset')),
            ],
            options={
                'ordering': ['device_name'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_number', models.CharField(max_length=20, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('department', models.CharField(blank=True, max_length=100)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('ordered', 'Ordered'), ('received', 'Received'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('budget_code', models.CharField(blank=True, max_length=50)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('currency', models.CharField(default='USD', max_length=3)),
                ('needed_by_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_purchases', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('report_type', models.CharField(choices=[('asset_utilization', 'Asset Utilization'), ('cost_analysis', 'Cost Analysis'), ('performance_metrics', 'Performance Metrics'), ('security_summary', 'Security Summary'), ('compliance_status', 'Compliance Status'), ('maintenance_summary', 'Maintenance Summary'), ('inventory_report', 'Inventory Report'), ('custom', 'Custom Report')], max_length=30)),
                ('frequency', models.CharField(choices=[('on_demand', 'On Demand'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], default='on_demand', max_length=20)),
                ('parameters', models.JSONField(blank=True, help_text='Report parameters and filters', null=True)),
                ('recipients', models.TextField(blank=True, help_text='Comma-separated email addresses')),
                ('is_active', models.BooleanField(default=True)),
                ('last_generated', models.DateTimeField(blank=True, null=True)),
                ('next_generation', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceCatalog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=200)),
                ('service_code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
                ('service_type', models.CharField(choices=[('hardware', 'Hardware Service'), ('software', 'Software Service'), ('network', 'Network Service'), ('security', 'Security Service'), ('support', 'Support Service'), ('cloud', 'Cloud Service'), ('consulting', 'Consulting Service')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('development', 'Under Development'), ('retired', 'Retired')], default='development', max_length=20)),
                ('cost_per_user', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('cost_per_month', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('sla_target', models.CharField(blank=True, help_text='Service Level Agreement target', max_length=100)),
                ('documentation_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('business_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business_owned_services', to=settings.AUTH_USER_MODEL)),
                ('dependencies', models.ManyToManyField(blank=True, to='itms_app.servicecatalog')),
                ('service_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_services', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['service_code'],
            },
        ),
        migrations.CreateModel(
            name='VulnerabilityAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vulnerability_id', models.CharField(max_length=20, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('cve_id', models.CharField(blank=True, help_text='Common Vulnerabilities and Exposures ID', max_length=20)),
                ('risk_level', models.CharField(choices=[('info', 'Informational'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('identified', 'Identified'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('fixed', 'Fixed'), ('mitigated', 'Mitigated'), ('accepted', 'Accepted Risk')], default='identified', max_length=20)),
                ('discovery_method', models.CharField(blank=True, max_length=100)),
                ('discovery_date', models.DateTimeField()),
                ('target_fix_date', models.DateField(blank=True, null=True)),
                ('fix_date', models.DateTimeField(blank=True, null=True)),
                ('remediation_notes', models.TextField(blank=True)),
                ('verification_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('affected_assets', models.ManyToManyField(blank=True, to='itms_app.asset')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_vulnerabilities', to=settings.AUTH_USER_MODEL)),
                ('discovered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TrainingRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('training_type', models.CharField(choices=[('orientation', 'New Employee Orientation'), ('technical', 'Technical Training'), ('security', 'Security Training'), ('compliance', 'Compliance Training'), ('certification', 'Certification Program'), ('refresher', 'Refresher Training')], max_length=20)),
                ('scheduled_date', models.DateTimeField()),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='scheduled', max_length=20)),
                ('score', models.FloatField(blank=True, help_text='Training score (0-100)', null=True)),
                ('certificate_issued', models.BooleanField(default=False)),
                ('certificate_expiry', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trainee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_records', to=settings.AUTH_USER_MODEL)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conducted_trainings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_number', models.CharField(max_length=20, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20)),
                ('status', models.CharField(choices=[('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='submitted', max_length=20)),
                ('business_justification', models.TextField(blank=True)),
                ('expected_completion', models.DateField(blank=True, null=True)),
                ('actual_completion', models.DateTimeField(blank=True, null=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('actual_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('work_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_service_requests', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_service_requests', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_requests', to=settings.AUTH_USER_MODEL)),
                ('requested_for', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_services', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='itms_app.servicecatalog')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SecurityIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incident_id', models.CharField(max_length=20, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('incident_type', models.CharField(choices=[('data_breach', 'Data Breach'), ('malware', 'Malware Attack'), ('unauthorized_access', 'Unauthorized Access'), ('phishing', 'Phishing Attack'), ('ddos', 'DDoS Attack'), ('insider_threat', 'Insider Threat'), ('physical_security', 'Physical Security'), ('social_engineering', 'Social Engineering'), ('other', 'Other')], max_length=30)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('reported', 'Reported'), ('investigating', 'Investigating'), ('contained', 'Contained'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='reported', max_length=20)),
                ('discovered_date', models.DateTimeField()),
                ('resolution_date', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('lessons_learned', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('affected_assets', models.ManyToManyField(blank=True, to='itms_app.asset')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_incidents', to=settings.AUTH_USER_MODEL)),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reported_incidents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SecurityAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event_type', models.CharField(choices=[('login', 'User Login'), ('logout', 'User Logout'), ('access_granted', 'Access Granted'), ('access_denied', 'Access Denied'), ('data_access', 'Data Access'), ('configuration_change', 'Configuration Change'), ('system_event', 'System Event'), ('security_event', 'Security Event')], max_length=30)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('event_description', models.TextField()),
                ('outcome', models.CharField(choices=[('success', 'Success'), ('failure', 'Failure')], max_length=20)),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=20)),
                ('additional_data', models.JSONField(blank=True, null=True)),
                ('asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='itms_app.asset')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ReportGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed')], default='queued', max_length=20)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_size_mb', models.FloatField(blank=True, null=True)),
                ('generation_time_seconds', models.FloatField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('parameters_used', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generations', to='itms_app.report')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseRequestItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_description', models.CharField(max_length=200)),
                ('quantity', models.IntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('notes', models.TextField(blank=True)),
                ('inventory_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='itms_app.inventoryitem')),
                ('purchase_request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='itms_app.purchaserequest')),
                ('vendor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='itms_app.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='MobileSecurityPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('policy_type', models.CharField(choices=[('device_restrictions', 'Device Restrictions'), ('app_restrictions', 'App Restrictions'), ('network_access', 'Network Access'), ('data_protection', 'Data Protection'), ('compliance', 'Compliance Policy')], max_length=30)),
                ('policy_rules', models.JSONField(help_text='Policy rules and configurations')),
                ('is_active', models.BooleanField(default=True)),
                ('enforcement_level', models.CharField(choices=[('warn', 'Warning Only'), ('enforce', 'Enforce Policy'), ('block', 'Block Access')], default='enforce', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('target_devices', models.ManyToManyField(blank=True, to='itms_app.mobiledevice')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='MobileAppManagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_name', models.CharField(max_length=200)),
                ('bundle_id', models.CharField(help_text='App bundle identifier', max_length=200)),
                ('version', models.CharField(blank=True, max_length=50)),
                ('app_type', models.CharField(choices=[('mandatory', 'Mandatory'), ('optional', 'Optional'), ('blacklisted', 'Blacklisted')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('install_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('target_devices', models.ManyToManyField(blank=True, to='itms_app.mobiledevice')),
            ],
            options={
                'ordering': ['app_name'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('article_type', models.CharField(choices=[('troubleshooting', 'Troubleshooting Guide'), ('how_to', 'How-to Guide'), ('faq', 'Frequently Asked Questions'), ('best_practice', 'Best Practices'), ('policy', 'Policy Document'), ('procedure', 'Standard Procedure')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('review', 'Under Review'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500)),
                ('view_count', models.IntegerField(default=0)),
                ('helpful_votes', models.IntegerField(default=0)),
                ('not_helpful_votes', models.IntegerField(default=0)),
                ('last_reviewed', models.DateTimeField(blank=True, null=True)),
                ('next_review_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authored_articles', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='itms_app.category')),
                ('reviewers', models.ManyToManyField(blank=True, related_name='reviewed_articles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='IPAddressAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(unique=True)),
                ('subnet', models.CharField(help_text='CIDR notation (e.g., 192.168.1.0/24)', max_length=18)),
                ('status', models.CharField(choices=[('allocated', 'Allocated'), ('available', 'Available'), ('reserved', 'Reserved'), ('blocked', 'Blocked')], default='available', max_length=20)),
                ('hostname', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('allocation_date', models.DateTimeField(blank=True, null=True)),
                ('lease_expiry', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allocated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('asset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='itms_app.asset')),
            ],
            options={
                'ordering': ['ip_address'],
            },
        ),
        migrations.CreateModel(
            name='DisasterRecoveryTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_id', models.CharField(max_length=20, unique=True)),
                ('test_type', models.CharField(choices=[('tabletop', 'Tabletop Exercise'), ('walkthrough', 'Walkthrough Test'), ('simulation', 'Simulation Test'), ('parallel', 'Parallel Test'), ('full_interruption', 'Full Interruption Test')], max_length=30)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('scheduled_date', models.DateTimeField()),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('objectives', models.TextField()),
                ('results', models.TextField(blank=True)),
                ('issues_identified', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('success_criteria_met', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('participants', models.ManyToManyField(blank=True, related_name='dr_tests', to=settings.AUTH_USER_MODEL)),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='itms_app.disasterrecoveryplan')),
                ('test_coordinator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='ChangeManagement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_number', models.CharField(max_length=20, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('change_type', models.CharField(choices=[('standard', 'Standard Change'), ('normal', 'Normal Change'), ('emergency', 'Emergency Change')], max_length=20)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('implemented', 'Implemented'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='draft', max_length=20)),
                ('business_justification', models.TextField()),
                ('impact_assessment', models.TextField()),
                ('rollback_plan', models.TextField()),
                ('planned_start', models.DateTimeField()),
                ('planned_end', models.DateTimeField()),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('approval_date', models.DateTimeField(blank=True, null=True)),
                ('implementation_notes', models.TextField(blank=True)),
                ('post_implementation_review', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('affected_assets', models.ManyToManyField(blank=True, to='itms_app.asset')),
                ('affected_services', models.ManyToManyField(blank=True, to='itms_app.servicecatalog')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_changes', to=settings.AUTH_USER_MODEL)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_changes', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_changes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BackupPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('backup_type', models.CharField(choices=[('full', 'Full Backup'), ('incremental', 'Incremental Backup'), ('differential', 'Differential Backup'), ('snapshot', 'Snapshot')], max_length=20)),
                ('frequency', models.CharField(choices=[('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')], max_length=20)),
                ('retention_days', models.IntegerField(help_text='Number of days to retain backups')),
                ('backup_location', models.TextField(help_text='Storage location/path for backups')),
                ('is_active', models.BooleanField(default=True)),
                ('next_scheduled', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assets', models.ManyToManyField(blank=True, to='itms_app.asset')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BackupJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.CharField(max_length=20, unique=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('backup_size_gb', models.FloatField(blank=True, null=True)),
                ('backup_location', models.TextField(blank=True)),
                ('success_message', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('failed', 'Verification Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='itms_app.asset')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backup_jobs', to='itms_app.backuppolicy')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AuditRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audit_id', models.CharField(max_length=20, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('audit_type', models.CharField(choices=[('internal', 'Internal Audit'), ('external', 'External Audit'), ('compliance', 'Compliance Audit'), ('security', 'Security Audit'), ('financial', 'Financial Audit'), ('operational', 'Operational Audit')], max_length=20)),
                ('scope', models.TextField()),
                ('planned_start_date', models.DateField()),
                ('planned_end_date', models.DateField()),
                ('actual_start_date', models.DateField(blank=True, null=True)),
                ('actual_end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('findings_summary', models.TextField(blank=True)),
                ('recommendations', models.TextField(blank=True)),
                ('management_response', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('audit_team', models.ManyToManyField(blank=True, related_name='audit_participations', to=settings.AUTH_USER_MODEL)),
                ('framework', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='itms_app.complianceframework')),
                ('lead_auditor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_audits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-planned_start_date'],
            },
        ),
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('metric_type', models.CharField(max_length=20)),
                ('condition', models.CharField(choices=[('greater_than', 'Greater Than'), ('less_than', 'Less Than'), ('equals', 'Equals'), ('not_equals', 'Not Equals'), ('contains', 'Contains'), ('not_responding', 'Not Responding')], max_length=20)),
                ('threshold_value', models.FloatField()),
                ('severity', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('notification_emails', models.TextField(blank=True, help_text='Comma-separated email addresses')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assets', models.ManyToManyField(blank=True, to='itms_app.asset')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.CharField(max_length=20, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='active', max_length=20)),
                ('metric_type', models.CharField(blank=True, max_length=20)),
                ('threshold_value', models.FloatField(blank=True, null=True)),
                ('actual_value', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='itms_app.asset')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemMonitoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('cpu', 'CPU Usage'), ('memory', 'Memory Usage'), ('disk', 'Disk Usage'), ('network', 'Network Usage'), ('temperature', 'Temperature'), ('power', 'Power Consumption'), ('uptime', 'System Uptime'), ('response_time', 'Response Time'), ('throughput', 'Throughput'), ('error_rate', 'Error Rate')], max_length=20)),
                ('value', models.FloatField()),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('additional_data', models.JSONField(blank=True, null=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_metrics', to='itms_app.asset')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['asset', 'metric_type', 'timestamp'], name='itms_app_sy_asset_i_e6f2a5_idx')],
            },
        ),
        migrations.CreateModel(
            name='NetworkPort',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('port_number', models.CharField(max_length=20)),
                ('port_type', models.CharField(choices=[('ethernet', 'Ethernet'), ('fiber', 'Fiber Optic'), ('console', 'Console'), ('management', 'Management'), ('uplink', 'Uplink'), ('trunk', 'Trunk'), ('access', 'Access')], max_length=20)),
                ('status', models.CharField(choices=[('up', 'Up'), ('down', 'Down'), ('disabled', 'Disabled'), ('error', 'Error')], default='down', max_length=20)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('connected_to', models.CharField(blank=True, help_text='Description of what is connected', max_length=200)),
                ('vlan_id', models.IntegerField(blank=True, null=True)),
                ('speed_mbps', models.IntegerField(blank=True, null=True)),
                ('duplex', models.CharField(blank=True, choices=[('half', 'Half'), ('full', 'Full')], max_length=10)),
                ('is_monitored', models.BooleanField(default=True)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ports', to='itms_app.networkdevice')),
            ],
            options={
                'ordering': ['device', 'port_number'],
                'unique_together': {('device', 'port_number')},
            },
        ),
        migrations.CreateModel(
            name='NetworkMonitoring',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('ping', 'Ping Response'), ('bandwidth', 'Bandwidth Usage'), ('cpu', 'CPU Usage'), ('memory', 'Memory Usage'), ('temperature', 'Temperature'), ('port_status', 'Port Status'), ('traffic', 'Network Traffic')], max_length=20)),
                ('value', models.FloatField()),
                ('unit', models.CharField(blank=True, max_length=20)),
                ('threshold_min', models.FloatField(blank=True, null=True)),
                ('threshold_max', models.FloatField(blank=True, null=True)),
                ('is_alert', models.BooleanField(default=False)),
                ('additional_data', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='monitoring_data', to='itms_app.networkdevice')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['device', 'metric_type', 'timestamp'], name='itms_app_ne_device__f42339_idx')],
            },
        ),
        migrations.CreateModel(
            name='ComplianceRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('control_id', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('implementation_guidance', models.TextField(blank=True)),
                ('evidence_required', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('compliant', 'Compliant'), ('non_compliant', 'Non-Compliant'), ('partially_compliant', 'Partially Compliant'), ('not_assessed', 'Not Assessed')], default='not_assessed', max_length=20)),
                ('last_assessed', models.DateTimeField(blank=True, null=True)),
                ('next_assessment', models.DateField(blank=True, null=True)),
                ('assessment_notes', models.TextField(blank=True)),
                ('remediation_plan', models.TextField(blank=True)),
                ('target_completion_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('framework', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requirements', to='itms_app.complianceframework')),
                ('responsible_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['framework', 'control_id'],
                'unique_together': {('framework', 'control_id')},
            },
        ),
        migrations.CreateModel(
            name='AccessControlMatrix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_type', models.CharField(choices=[('read', 'Read'), ('write', 'Write'), ('execute', 'Execute'), ('admin', 'Admin'), ('full_control', 'Full Control')], max_length=20)),
                ('granted_date', models.DateTimeField()),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('justification', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('revoked_date', models.DateTimeField(blank=True, null=True)),
                ('revocation_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='itms_app.asset')),
                ('granted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='granted_access', to=settings.AUTH_USER_MODEL)),
                ('revoked_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='revoked_access', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'asset', 'access_type')},
            },
        ),
    ]
